[
    {
      "id": 1,
      "riddle": "I'm a silent stopper, often forgotten. Without me, your lines get knotted. What am I?",
      "buggyCode": "let message = \"Hello World\"\nconsole.log(message)",
      "expectedOutput": "Hello World",
      "level": "Easy"
    },
    {
      "id": 2,
      "riddle": "I'm named, but not yet born, within my block I'm torn. Before I'm given value, a silent error's drawn. What am I?",
      "buggyCode": "function displayValue() {\n  console.log(myVar);\n  let myVar = 5;\n}\ndisplayValue();",
      "expectedOutput": "5",
      "level": "Easy"
    },
    {
      "id": 3,
      "riddle": "I join texts, a simple task, but a missing piece will make your string unmask. What am I?",
      "buggyCode": "let firstName = \"John\";\nlet lastName = \"Doe\";\nconsole.log(firstName lastName);",
      "expectedOutput": "JohnDoe",
      "level": "Easy"
    },
    {
      "id": 4,
      "riddle": "I'm defined, I have a name, but if you don't call me right, I won't play your game. What am I?",
      "buggyCode": "function calculateSum(a, b) {\n  return a + b;\n}\nconsole.log(calculateSum 10, 5);",
      "expectedOutput": "15",
      "level": "Easy"
    },
    {
      "id": 5,
      "riddle": "I hold many items, neatly aligned. But if you ask for one beyond my kind, an empty void you'll find. What am I?",
      "buggyCode": "const colors = [\"red\", \"green\", \"blue\"];\nconsole.log(colors[3]);",
      "expectedOutput": "blue",
      "level": "Easy"
    },
    {
      "id": 6,
      "riddle": "My loop counts, but with a slight misstep. One less iteration, a value I've kept. What am I?",
      "buggyCode": "for (let i = 1; i < 5; i++) {\n  console.log(i);\n}",
      "expectedOutput": "1\n2\n3\n4\n5",
      "level": "Intermediate"
    },
    {
      "id": 7,
      "riddle": "In my method, I refer to myself, or so I assume. But if I lose my link, I fall into gloom. What am I?",
      "buggyCode": "const person = {\n  name: 'Alice',\n  greet: function() {\n    console.log('Hello, ' + this.name);\n  }\n};\nsetTimeout(person.greet, 100);",
      "expectedOutput": "Hello, Alice",
      "level": "Intermediate"
    },
    {
      "id": 8,
      "riddle": "Two values, seemingly the same, but my strict gaze reveals a different game. What am I?",
      "buggyCode": "console.log(10 == '10');",
      "expectedOutput": "false",
      "level": "Intermediate"
    },
    {
      "id": 9,
      "riddle": "I transform arrays, creating new views. But if I don't give back, empty voids ensue. What am I?",
      "buggyCode": "const nums = [1, 2, 3];\nconst squared = nums.map(num => {\n  num * num;\n});\nconsole.log(squared);",
      "expectedOutput": "[1, 4, 9]",
      "level": "Intermediate"
    },
    {
      "id": 10,
      "riddle": "I'm built for instant use, a self-starter true. But if I lack my final touch, my execution's through. What am I?",
      "buggyCode": "(function() {\n  console.log(\"I ran immediately!\");\n});()",
      "expectedOutput": "I ran immediately!",
      "level": "Intermediate"
    },
    {
      "id": 11,
      "riddle": "I capture variables, a powerful art. But in a loop's embrace, I might play a tricky part. What am I?",
      "buggyCode": "const funcs = [];\nfor (var i = 0; i < 3; i++) {\n  funcs.push(function() {\n    console.log(i);\n  });\n}\nfuncs[0]();\nfuncs[1]();\nfuncs[2]();",
      "expectedOutput": "0\n1\n2",
      "level": "Difficult"
    },
    {
      "id": 12,
      "riddle": "I delay execution, a waiting game. But in a fast loop, my timing's to blame. What am I?",
      "buggyCode": "for (var i = 0; i < 3; i++) {\n  setTimeout(function() {\n    console.log(i);\n  }, 10);\n}",
      "expectedOutput": "0\n1\n2",
      "level": "Difficult"
    },
    {
      "id": 13,
      "riddle": "I handle async tasks, in sequence I flow. But if a promise isn't passed, my chain won't grow. What am I?",
      "buggyCode": "function fetchUser() {\n  return Promise.resolve({ id: 1, name: 'Bugs' });\n}\n\nfetchUser()\n  .then(user => {\n    console.log('User fetched:', user.name);\n    Promise.resolve('User data processed'); // Missing return\n  })\n  .then(message => {\n    console.log('Message:', message);\n  });",
      "expectedOutput": "User fetched: Bugs\nMessage: User data processed",
      "level": "Difficult"
    },
    {
      "id": 14,
      "riddle": "I pick my parts, from objects I pull. But if a nested path's missing, my value falls null. What am I?",
      "buggyCode": "const data = { config: { timeout: 1000, maxRetries: 3 } };\nconst { config: { retryLimit } } = data;\nconsole.log(retryLimit);",
      "expectedOutput": "3",
      "level": "Difficult"
    },
    {
      "id": 15,
      "riddle": "I check ownership, a property's true abode. But if I don't use the right method, false results are showed. What am I?",
      "buggyCode": "const animal = { type: 'mammal' };\nconst dog = Object.create(animal);\ndog.name = 'Buddy';\n\nfor (let prop in dog) {\n  if (dog[prop] !== undefined) { // Incorrect check for own properties\n    console.log(prop);\n  }\n}",
      "expectedOutput": "name",
      "level": "Difficult"
    }
  ]
  
